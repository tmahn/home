#!/usr/bin/env python2.5
# coding: UTF-8

# Usage: make-password [TEMPLATE]
# Generate random passwords using the specified template, and print them to
# stdout.
#
# TEMPLATE is a sequence of characters, each of which is replaced with a
# corresponding randomly chosen string:
#
#  W - a word
#  D - a digit: 0-9
#  P - a punctuation mark: (!"#$%&'*+,-./:;<=>?@[\]^_`{|}~)
#  L - a letter: a-zA-Z
#  N - a non-letter: digit or punctuation
#  C - any character: letter, digit, or punctuation
#
# For example the template “DWP” produces passwords with a digit followed
# by a word followed by a punctuation mark, e.g. “3globetrot#”.

import gzip
import math
import os
import random
import re
import string
import sys

TEMPLATE_METACHARS = {
    'D': string.digits,
    'P': string.punctuation,
    'L': string.letters,
    'N': string.digits + string.punctuation,
    'C': string.letters + string.digits + string.punctuation,
}

inited = False

def init():
    global inited, sys_random, TEMPLATE_METACHARS

    if inited:
        return

    # To use a custom wordlist, put a “words.gz” in the same directory as
    # this file.
    wordlist_name = os.path.join(os.path.dirname(__file__), 'words.gz')
    if os.path.exists(wordlist_name):
        wordlist = gzip.open(wordlist_name)
    else:
        wordlist = open('/usr/share/dict/words', 'r')
    try:
        TEMPLATE_METACHARS['W']  = wordlist.read().split('\n')
    finally:
        wordlist.close()

    sys_random = random.SystemRandom()

    inited = True


class PasswordGenerator(object):

    def __init__(self, template='WNCCCNWNW'):
        init()
        for char in template:
            if char not in TEMPLATE_METACHARS:
                raise Exception("Unknown template character ‘%s’: RTFSRC"
                        % char)
        self.template = template

    def get_keyspace_size(self):
        n = 1
        for char in self.template:
            n *= len(TEMPLATE_METACHARS[char])
        return n

    def generate_password(self):
        ret = ''
        for char in self.template:
            ret += sys_random.choice(TEMPLATE_METACHARS[char])
        return ret

    def __str__(self):
        size = self.get_keyspace_size()

        # 94 is the number of possible characters with uppercase,
        # lowercase, punctuation, and digits
        return ('Password generator with '
            + (' ≅ '.join(("%d^%.1f" % (base, math.log(size) / math.log(base))
                for base in [10, 2, 94])))
            + ' possible passwords')

def main(args=None):
    if args is None:
        args = sys.argv[1:]

    p = PasswordGenerator(*args)
    print str(p) + ':'

    for i in range(3):
        print p.generate_password()

if __name__ == '__main__':
    main()
