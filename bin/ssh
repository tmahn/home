#!/bin/bash

set -eu

MY_SSH_AUTH_DIR="${HOME}/.ssh/agent/${HOSTNAME}"
MY_SSH_AUTH_PID_FILE="${MY_SSH_AUTH_DIR}/pid"

: "${SSH_AUTH_SOCK="${MY_SSH_AUTH_DIR}/sock"}"

function ssh_agent_is_missing() {
    [ -z "${SSH_AUTH_SOCK}" ] || ! [ -S "${SSH_AUTH_SOCK}" ] \
        || ! ssh-add -l >&/dev/null;
    # ^-- We can’t test if a socket is valid from shell, so we make a test
    # connection to the agent to verify there is one.
}

if ssh_agent_is_missing; then
    SSH_AUTH_SOCK="${MY_SSH_AUTH_DIR}/sock"
    export SSH_AUTH_SOCK
fi

# Start an ssh agent if there’s no working one
if ssh_agent_is_missing && [ -f "${HOME}/.ssh/id_rsa" ]; then
    : "${SSH_AUTH_PID=}"
    # Kill the old one
    if [ -z "${SSH_AUTH_PID}" ] && [ -r "${MY_SSH_AUTH_PID_FILE}" ]; then
        SSH_AUTH_PID="$(<"${MY_SSH_AUTH_PID_FILE}")"
    fi
    rm -f "${SSH_AUTH_SOCK}"

    if [ -n "${SSH_AUTH_PID}" ]; then
        if awk -v FS='\000' '{exit !match($1,"ssh-agent")}' \
            "/proc/${SSH_AUTH_PID}/cmdline" >&/dev/null
        then
            kill "${SSH_AUTH_PID}"
        fi
    fi

    if ! [ -d "${MY_SSH_AUTH_DIR}" ]; then
        mkdir -m 0700 -p "${MY_SSH_AUTH_DIR}"
    fi
    eval $(ssh-agent -a "${SSH_AUTH_SOCK}") 1>&2
    echo "${SSH_AGENT_PID}" > "${MY_SSH_AUTH_PID_FILE}"

    ssh-add
fi

# Check for a binary ssh in $SSH_CMD or user’s home directory
: "${SSH_CMD="${HOME}/usr/arch/$(arch)/bin/ssh"}"
if ! [ -x "${SSH_CMD}" ]; then
    SSH_CMD="/usr/bin/ssh"
fi
exec "${SSH_CMD}" "${@}"
