#!/usr/bin/env python

"""
Find the point at which a pattern disappeared from a file in a subversion
repository, using binary search.

There's an annoying bug in a program you're trying to use. You go to file a
bug report, but search for the bug first. It was fixed seven years ago. You
check the code. Indeed it was, but the patch is no longer on trunk, or in
the version you're using.

Starting at REV, this program will find when PATTERN disappeared from
TARGET.
"""
USAGE = "%prog TARGET REV PATTERN"

import re
import sys
from optparse import OptionParser
from xml.xpath import Evaluate as xpatheval
from xml.dom.minidom import parseString as parseXmlString

from blindrut.os import unix_pipe
from blindrut.algo import binary_search

def svnxml(args):
    """Run svn with the given arguments, returning an xml document."""
    return parseXmlString(unix_pipe(['svn', '--xml'] + args))

def svncat(target, rev):
    return unix_pipe(['svn', 'cat', '-r', str(rev), target])

def main(args=None):
    if args is None:
        args = sys.argv[1:]

    parser = OptionParser(description=__doc__.strip(), usage=USAGE)
    (options, args) = parser.parse_args(args=args)

    if len(args) != 3:
        parser.print_help()
        return 1

    target, rev, pattern = args

    rev = int(rev)
    cur_rev = int(xpatheval('number(/info/entry/@revision)',
            svnxml(['info', target])))

    re_pattern = re.compile(pattern)

    def revcmp(rev):
        match = re_pattern.search(svncat(target, rev))
        print '%s on revision %d' % ('Match' if match else 'No match', rev)
        return 1 if match else -1
    found, rev = binary_search(rev, cur_rev, revcmp)
    print 'The first revision without %s is %d' % (repr(pattern), rev)

if __name__ == '__main__':
    sys.exit(main())
